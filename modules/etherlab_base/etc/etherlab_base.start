// Copyright (C) 2008  Andreas Stewering
// Copyright (C) 2008  Holger Nahrstaedt (HART-Project)
//
// This file is part of Etherlab.
//
// Etherlab is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// Etherlab is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Etherlab; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA//
// ====================================================================

modules_name= "etherlab_base"; //same name as the starter files in etc
mprintf("Start Etherlab base module\n");

// ====================================================================

warning_mode = warning('query');
warning('on');
current_dir=pwd();

etc_tlbx = get_absolute_file_path(modules_name+'.start');
etc_tlbx = getshortpathname(etc_tlbx);

use5 = %F;
try
  getversion('scilab');
  use5 = %T;
end

if use5 then
  root_tlbx = strncpy( etc_tlbx, length(etc_tlbx)-length('\etc\') );
else
  root_tlbx = part( etc_tlbx, 1:(length(etc_tlbx)-length('etc\')) );
  try
    test=gettext('test');
    clear test;
  catch
    try
      baselib=lib(root_tlbx+"..\..\macros\");
    catch
      error(msprintf(('%s Toolbox not installed."),'ETHERLAB'));
    end
  end
end

pathmacros = pathconvert( root_tlbx ) + 'macros'+ filesep();        
pathmacrosscicos = pathconvert( root_tlbx ) + "macros" + filesep()+ modules_name + "_scicos" + filesep();
pathcsource = pathconvert( root_tlbx ) + "src"+filesep()+"c"+ filesep();
status='';

try
  mprintf("Load macros\n");
  load(pathmacros + "lib");             // load modules macros
  load(pathmacrosscicos + "lib");       // load block interface files

  // load module's palette
  if use5 then
      loadXcosLibs();
      palette_name = pathconvert(root_tlbx + "/images/h5") + modules_name + ".sod";
      //mprintf("**1**: %s: %s\n", "palette_name", palette_name);
      [status, msg] = xcosPalAdd(palette_name, "Etherlab");
      //mprintf("**2**\n");
      if ~status then
          error(msg);
      end
  else
      palette_name = modules_name + "_scicos.cosf";
      scicos_pal($ + 1, 1) = "ETHERLAB "+modules_name;
      scicos_pal($, 2) = pathmacrosscicos + palette_name;
  end

  mprintf("Load c-lib\n");
  chdir(pathcsource);
  exec("loader.sce");
  chdir(current_dir);
 
  //add help chapter
  mprintf("Load help\n");
  if use5 then
    path_addchapter = root_tlbx + "/jar/";
    if ( fileinfo(path_addchapter) <> [] ) then
      mprintf("Adding help chapter at %s\n", path_addchapter);
      add_help_chapter('Etherlab base', path_addchapter, %F);
      mprintf("Done adding help chapter\n");
      clear add_help_chapter;
    end
  else     // version < 5
    path_addchapter = root_tlbx+"/help/en_US_scilab4/addchapter.sce";
    exec(path_addchapter);
  end

  listSuccessful($+1)=modules_name;
  status=sprintf(' |   %s                         ',modules_name);
catch
   [str,n,line,func]=lasterror(%f);
   mprintf("Error message: %s\n   on line %d of %s\n", str, line, func);
   mprintf("etherlab %s module could not loaded!\n",modules_name);
   listFailed($+1)=modules_name;
   status=sprintf(' !                         %s ',modules_name);
end
if (exists('loadDetails')==0) then
	loadDetails='';
end
loadDetails=[loadDetails; status];

// ====================================================================
clear warning_mode;
clear path_addchapter;
clear root_tlbx;
clear etc_tlbx;
clear pathmacros;
//clear pathconvert;
clear current_dir;
clear pathcsource;
clear status;
clear modules_name;
clear use5;
// ====================================================================
